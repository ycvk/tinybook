// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"tinybook/tinybook/interactive/events/rank"
	"tinybook/tinybook/interactive/events/readcount"
	"tinybook/tinybook/interactive/grpc"
	"tinybook/tinybook/interactive/ioc"
	"tinybook/tinybook/interactive/repository"
	"tinybook/tinybook/interactive/repository/cache"
	"tinybook/tinybook/interactive/repository/dao"
	"tinybook/tinybook/interactive/service"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitInteractiveApp() *App {
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	interactiveDAO := dao.NewGormInteractiveDAO(db)
	cmdable := ioc.InitRedis()
	theineCache := ioc.InitLocalCache()
	writer := ioc.InitWriter()
	likeRankEventProducer := rank.NewKafkaLikeRankProducer(writer)
	interactiveCache := cache.NewRedisInteractiveCache(cmdable, logger, theineCache, likeRankEventProducer)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, interactiveCache, logger)
	readCountKafkaConsumer := readcount.NewKafkaReadCountConsumer(interactiveRepository, logger)
	likeRankKafkaConsumer := rank.NewKafkaLikeRankConsumer(logger, theineCache, cmdable)
	v := readcount.CollectConsumer(readCountKafkaConsumer, likeRankKafkaConsumer)
	interactiveService := service.NewInteractiveService(interactiveRepository, likeRankEventProducer, logger)
	interactiveServiceServer := grpc.NewInteractiveServiceServer(interactiveService)
	server := ioc.InitGrpcServer(interactiveServiceServer, logger)
	app := &App{
		consumers: v,
		server:    server,
	}
	return app
}

// wire.go:

var thirdPartySet = wire.NewSet(ioc.InitDB, ioc.InitRedis, ioc.InitLogger, ioc.InitLocalCache)

var interactiveServiceSet = wire.NewSet(dao.NewGormInteractiveDAO, cache.NewRedisInteractiveCache, repository.NewCachedInteractiveRepository, service.NewInteractiveService)
