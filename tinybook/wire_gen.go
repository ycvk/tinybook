// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"tinybook/tinybook/article/events/readcount"
	repository3 "tinybook/tinybook/article/repository"
	cache2 "tinybook/tinybook/article/repository/cache"
	dao2 "tinybook/tinybook/article/repository/dao"
	service3 "tinybook/tinybook/article/service"
	web2 "tinybook/tinybook/article/web"
	"tinybook/tinybook/interactive/events/rank"
	readcount2 "tinybook/tinybook/interactive/events/readcount"
	repository2 "tinybook/tinybook/interactive/repository"
	cache3 "tinybook/tinybook/interactive/repository/cache"
	dao3 "tinybook/tinybook/interactive/repository/dao"
	service2 "tinybook/tinybook/interactive/service"
	"tinybook/tinybook/internal/job"
	"tinybook/tinybook/internal/repository"
	"tinybook/tinybook/internal/repository/cache"
	"tinybook/tinybook/internal/repository/dao"
	"tinybook/tinybook/internal/service"
	"tinybook/tinybook/internal/web"
	"tinybook/tinybook/internal/web/jwt"
	"tinybook/tinybook/ioc"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitWebServer() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	logger := ioc.InitLogger()
	v := ioc.InitHandlerFunc(cmdable, handler, logger)
	db := ioc.InitDB(logger)
	userDAO := dao.NewGormUserDAO(db)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewCachedUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, logger)
	theineCache := ioc.InitLocalCache()
	codeCache := cache.NewLocalCodeCache(theineCache)
	codeRepository := repository.NewCachedCodeRepository(codeCache)
	smsdao := dao.NewGormSMSDAO(db)
	smsRepository := repository.NewGormSMSRepository(smsdao)
	smsService := ioc.InitSMSService(cmdable, smsRepository)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, handler)
	wechatService := ioc.InitWechatService()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, handler)
	database := ioc.InitMongoDB(logger)
	conn := ioc.InitMongoDBV2()
	articleDAO := dao2.NewMongoDBArticleDAO(database, conn)
	articleCache := cache2.NewRedisArticleCache(cmdable)
	interactiveDAO := dao3.NewGormInteractiveDAO(db)
	writer := ioc.InitWriter()
	likeRankEventProducer := rank.NewKafkaLikeRankProducer(writer)
	interactiveCache := cache3.NewRedisInteractiveCache(cmdable, logger, theineCache, likeRankEventProducer)
	interactiveRepository := repository2.NewCachedInteractiveRepository(interactiveDAO, interactiveCache, logger)
	interactiveService := service2.NewInteractiveService(interactiveRepository, likeRankEventProducer, logger)
	interactiveServiceClient := ioc.InitIntrClient(interactiveService)
	articleRepository := repository3.NewCachedArticleRepository(articleDAO, articleCache, userRepository, logger, interactiveServiceClient)
	readEventProducer := readcount.NewKafkaReadCountProducer(writer)
	articleService := service3.NewArticleService(articleRepository, readEventProducer, logger)
	articleHandler := web2.NewArticleHandler(articleService, logger)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler)
	readCountKafkaConsumer := readcount2.NewKafkaReadCountConsumer(interactiveRepository, logger)
	likeRankKafkaConsumer := rank.NewKafkaLikeRankConsumer(logger, theineCache, cmdable)
	v2 := readcount2.CollectConsumer(readCountKafkaConsumer, likeRankKafkaConsumer)
	rankingCache := cache.NewRedisRankingCache(cmdable)
	rankingRepository := repository.NewCachedRankingRepository(rankingCache)
	rankingService := service.NewBatchRankingService(articleService, rankingRepository)
	client := ioc.InitRedisLock(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, client, logger)
	cron := ioc.InitJobs(logger, rankingJob)
	cronJobDao := dao.NewGormCronJobDao(db)
	cronJobRepository := repository.NewCronJobRepository(cronJobDao)
	cronJobService := service.NewCronJobService(logger, cronJobRepository)
	scheduler := job.NewScheduler(cronJobService, logger)
	app := &App{
		server:    engine,
		consumers: v2,
		cron:      cron,
		scheduler: scheduler,
	}
	return app
}

// wire.go:

// 热榜服务
var rankingServiceProvider = wire.NewSet(cache.NewRedisRankingCache, repository.NewCachedRankingRepository, service.NewBatchRankingService)

// interactive 互动服务
var interactiveServiceProvider = wire.NewSet(cache3.NewRedisInteractiveCache, dao3.NewGormInteractiveDAO, repository2.NewCachedInteractiveRepository, service2.NewInteractiveService, ioc.InitIntrClient)

// job 服务
var jobServiceProvider = wire.NewSet(service.NewCronJobService, repository.NewCronJobRepository, dao.NewGormCronJobDao, job.NewScheduler, job.NewLocalFuncExecutor)
